#!/usr/bin/env python


import scapy.all as scapy
import argparse

def scan(IP):
    arp_request = scapy.ARP(pdst=IP) #broadcasting arp packets # arp_request.pdst = ip
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff") # Mac in bracket is broadcast mac# sending broadcast packet to destination mac address# broadcast.dst = "ff:ff:ff:ff:ff:ff"
    arp_request_broadcast=broadcast/arp_request
    # arp_request_broadcast.show()
    Answered= scapy.srp(arp_request_broadcast,timeout=1,verbose=False)[0]# allows to send packet with custom ether part and receive the response#timeout needed to add for 1 sec

    print("IP\t\t\tMAC Address\n---------------------------------------------------------------")
    for element in Answered:
        print(element[1].psrc + "\t\t" + element[1].hwsrc) # extracting ip of the source from the answered list
     # extracting mac of the source from the answered list
        print("---------------------------------------------------------------")

def get_arguments(): # command line input
    parser=argparse.ArgumentParser(description="Provide the IP address")
    parser.add_argument("-i",dest="IP",help="The IP address and range")
    args=parser.parse_args()
    if not args.IP:
        parser.error("[-] Please specify a Valid IP address, Use --help for more info")
    else:
        return args


    # print(Unanswered.summary())  
args=get_arguments()
scan(args.IP)
    # print(arp_request_broadcast)
    # print(arp_request.summary())
    # print(broadcast.summary())
    # scapy.ls(scapy.ARP()) checks attributes of scapy for ARP class
    #scapy.ls(scapy.ether()) check attributes of scapy for ether class
    # scapy.arping(ip)arp ping



